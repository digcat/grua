#!/usr/bin/env python

from grua import grua
from grua.deps import calc_deps, sort_containers
from grua.util import find_bridge_ip

import yaml, sys, errno, os

args = sys.argv[1:]


# global state
class Global:
    def __init__(self):
        self.dict = {}

    def set(self, key, val):
        self.dict[key] = val

    def get(self, key):
        return self.dict[key]


def setup():

    global G
    G = Global()

    G.set('dependencies', {})
    G.set('bridgeIp', find_bridge_ip())

    # grua.yamlpath = grua.find_yaml_location()
    # Project = 'grua'  # gets replaced by 'project' value in 'global' from grua.yaml
    # GruaBase = '/var/lib/grua'
    # VolumePath = GruaBase + '/volumes' # replaced by 'global/volumepath' in grua.yaml
    # ConfigPath = os.environ["HOME"] + "/.grua"

    G.set('yamlPath', grua.find_yaml_location())
    G.set('project', 'grua')  # gets replaced by 'project' value in 'global' from grua.yaml
    G.set('gruaBase', '/var/lib/grua')
    G.set('volumePath', G.get('gruaBase') + '/volumes')  # replaced by 'global/volumepath' in grua.yaml
    G.set('configPath', os.environ["HOME"] + "/.grua")

    os.chdir(G.get('yamlPath'))

    with open(G.get('yamlPath') + "/grua.yaml", 'r') as stream:
        grua.config = yaml.load(stream)
        if grua.config.has_key('global'):
            if grua.config['global'].has_key('project'):
                # grua.Project = grua.config['global']['project']
                G.set('project', grua.config['global']['project'])
            if grua.config['global'].has_key('volumepath'):
                # grua.VolumePath = grua.config['global']['volumepath']
                G.set('volumePath', grua.config['global']['volumepath'])
        for container in grua.config:
            calc_deps(container, grua.config)

    configPath = G.get('configPath')
    project = G.get('project')

    # set up configuration path
    try:
        os.makedirs(configPath + "/" + project)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(configPath + "/" + project):
            pass
        else:
            raise

    grua.sorted_run_deps = grua.sort_containers()

    G.set('sortedRunDeps', sort_containers())

    grua.Mode = grua.get_mode()

setup()

if len(args) == 0:
    grua.usage()
else:
    try:
        grua.process_command(args)
    except Exception as ex:
        ##print "An unhandled exception occurred: " + e.\
        template = "An exception of type {0} occured. Arguments:\n{1!r} "
        message = template.format(type(ex).__name__, ex.args)
        print
        print "!!!"
        print message
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        print "!!!"
        print
        raise
        sys.exit(99)
